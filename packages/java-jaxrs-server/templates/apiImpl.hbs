package {{apiPackage}};

{{>frag/imports}}
@javax.ws.rs.Path("{{{path}}}")
{{>hooks/apiImplClassAnnotations}}
@io.swagger.annotations.Api(description = "the {{{capitalCase name}}} API")
{{#if consumes}}
@javax.ws.rs.Consumes({ {{#each consumes}}"{{{.}}}"{{#unless @last}}, {{/unless}}{{/each}} })
{{/if}}
{{#if produces}}
@javax.ws.rs.Produces({ {{#each produces}}"{{{.}}}"{{#unless @last}}, {{/unless}}{{/each}} })
{{/if}}
{{>generatedAnnotation}}
@java.lang.SuppressWarnings("all")
public class {{className name}}ApiImpl implements {{apiPackage}}.{{className name}}Api {

	{{>util/inject interface=(concat apiPackage '.' (className name) 'ApiService') class=(concat apiServiceImplPackage '.' (className name) 'ApiServiceImpl') name='delegate'}}

{{#each operations}}
	public javax.ws.rs.core.Response {{name}}({{#each parameters}}{{>serviceQueryParams}}{{>servicePathParams}}{{>serviceHeaderParams}}{{>serviceFormParams}}{{#hasMore}}, {{/hasMore}}{{/each}}{{#if requestBody}}{{#if parameters}}, {{/if}}{{>serviceBodyParam}}{{/if}}) {
		{{#each responses}}{{#isDefault}}final javax.ws.rs.core.Response.ResponseBuilder __response = javax.ws.rs.core.Response.status({{code}}).cacheControl(javax.ws.rs.core.CacheControl.valueOf("{{{vendorExtensions.x-cache-control}}}{{^vendorExtensions.x-cache-control}}no-cache, no-store, must-revalidate, private{{/vendorExtensions.x-cache-control}}"));{{/isDefault}}{{/each}}
		try {
			{{#if @root.useBeanValidation}}
			{{>frag/beanValidationValidateParams}}
			{{/if}}
			{{#with defaultResponse}}
			{{#if nativeType}}{{{nativeType}}} __entity = {{/if}}this.delegate.{{identifier ../name}}({{#each ../parameters}}{{#if (isFile)}}{{identifier name}}InputStream, {{identifier name}}Detail{{else}}{{identifier name}}{{/if}}{{#hasMore}}, {{/hasMore}}{{/each}}{{#if ../requestBody}}{{#if ../parameters}}, {{/if}}{{identifier ../requestBody.name}}{{/if}}{{#unless nativeType}}{{#or ../parameters ../requestBody}}, {{/or}}__response{{/unless}});
			{{#if nativeType}}
			__response.entity(__entity);
			{{/if}}
			return __response.build();
			{{/with}}
		{{#each responses}}
		{{^isDefault}}
		} catch ({{{className @root/name}}}ApiService.{{{className ../name}}}{{{code}}}Exception __e) {
			__response.status({{code}});
			{{#if nativeType}}
			__response.entity(__e.getEntity());
			{{/if}}
			return __response.build();
		{{/isDefault}}
		{{/each}}
		} finally {
		
		}
	}

{{/each}}
}
