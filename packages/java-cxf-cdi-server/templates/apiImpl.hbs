package {{apiPackage}};

{{#imports}}import {{.}};
{{/imports}}

@javax.ws.rs.Path("{{{path}}}")
@javax.enterprise.context.Dependent
@io.swagger.annotations.Api(description = "the {{{name}}} API")
{{#if consumes}}
@javax.ws.rs.Consumes({ {{#consumes}}"{{{.}}}"{{#unless @last}}, {{/unless}}{{/consumes}} })
{{/if}}
{{#if produces}}
@javax.ws.rs.Produces({ {{#produces}}"{{{.}}}"{{#unless @last}}, {{/unless}}{{/produces}} })
{{/if}}
{{>generatedAnnotation}}
@java.lang.SuppressWarnings("all")
public class {{className name}}ApiImpl implements {{apiPackage}}.{{className name}}Api {

	@javax.inject.Inject
	private {{className name}}ApiService delegate;

{{#operations}}
	public javax.ws.rs.core.Response {{name}}({{#allParams}}{{>serviceQueryParams}}{{>servicePathParams}}{{>serviceHeaderParams}}{{>serviceBodyParams}}{{>serviceFormParams}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
		{{#responses}}{{#isDefault}}final javax.ws.rs.core.Response.ResponseBuilder __response = javax.ws.rs.core.Response.status({{code}}).cacheControl(javax.ws.rs.core.CacheControl.valueOf("{{{vendorExtensions.x-cache-control}}}{{^vendorExtensions.x-cache-control}}no-cache, no-store, must-revalidate, private{{/vendorExtensions.x-cache-control}}"));{{/isDefault}}{{/responses}}
		try {
			{{#if @root.useBeanValidation}}
			{{>frag/beanValidationValidateParams}}
			{{/if}}
			{{#defaultResponse}}
			{{#if nativeType}}{{{nativeType}}} __entity = {{/if}}this.delegate.{{identifier ../name}}({{#../allParams}}{{#isFile}}{{identifier name}}InputStream, {{identifier name}}Detail{{else}}{{identifier name}}{{/isFile}}{{#hasMore}}, {{/hasMore}}{{/../allParams}}{{#unless nativeType}}{{#if ../allParams}}, {{/if}}__response{{/unless}});
			{{#if nativeType}}
			__response.entity(__entity);
			{{/if}}
			return __response.build();
			{{/defaultResponse}}
		{{#responses}}
		{{^isDefault}}
		} catch ({{{className @root/name}}}ApiService.{{{className ../name}}}{{{code}}}Exception __e) {
			__response.status({{code}});
			{{#if nativeType}}
			__response.entity(__e.getEntity());
			{{/if}}
			return __response.build();
		{{/isDefault}}
		{{/responses}}
		} finally {
		
		}
	}

{{/operations}}
}
