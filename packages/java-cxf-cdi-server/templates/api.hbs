package {{apiPackage}};

{{#imports}}import {{.}};
{{/imports}}

@javax.ws.rs.Path("{{{path}}}")
@javax.enterprise.context.Dependent
@io.swagger.annotations.Api(description = "the {{{name}}} API")
{{#if consumes}}
@javax.ws.rs.Consumes({ {{#consumes}}"{{{.}}}"{{#unless @last}}, {{/unless}}{{/consumes}} })
{{/if}}
{{#if produces}}
@javax.ws.rs.Produces({ {{#produces}}"{{{.}}}"{{#unless @last}}, {{/unless}}{{/produces}} })
{{/if}}
{{>generatedAnnotation}}

@SuppressWarnings("all")
public class {{className name}}Api  {

	@javax.inject.Inject {{className name}}ApiService delegate;

{{#operations}}
{{>nestedModels}}
	@javax.ws.rs.{{httpMethod}}
	{{#if authMethods}}
	{{#if @root.authenticatedOperationAnnotation}}
	{{@root.authenticatedOperationAnnotation}}
	{{/if}}
	{{/if}}
	{{#isDeprecated}}
	@Deprecated
	{{/isDeprecated}}
	{{#if path}}
	@javax.ws.rs.Path("{{{path}}}")
	{{/if}}
	{{#if consumes}}
	@javax.ws.rs.Consumes({ {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} })
	{{/if}}
	{{#if produces}}
	@javax.ws.rs.Produces({ {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}} })
	{{/if}}
	@io.swagger.annotations.ApiOperation(value = "{{{summary}}}", notes = "{{{notes}}}"{{#if returnNativeType}}, response = {{{returnNativeType.literalType}}}.class{{/if}}{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}{{#if authMethods}}, authorizations = {
		{{#authMethods}}
		@io.swagger.annotations.Authorization(value = "{{name}}"{{#isOAuth}}, scopes = {
			{{#scopes}}
			@io.swagger.annotations.AuthorizationScope(scope = "{{name}}", description = "{{description}}"){{#hasMore}},{{/hasMore}}
			{{/scopes}}
		}{{/isOAuth}}){{#hasMore}},{{/hasMore}}
		{{/authMethods}}
	}{{/if}}, tags={ {{#tags}}"{{{.}}}"{{#hasMore}}, {{/hasMore}}{{/tags}} })
	@io.swagger.annotations.ApiResponses(value = {
		{{#responses}}
		@io.swagger.annotations.ApiResponse(code = {{{code}}}, message = "{{{description}}}", response = {{#if nativeType}}{{{nativeType.literalType}}}{{else}}Void{{/if}}.class{{#if containerType}}, responseContainer = "{{{containerType}}}"{{/if}}){{#hasMore}},{{/hasMore}}
		{{/responses}}
	})
	public javax.ws.rs.core.Response {{name}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
		{{#responses}}{{#isDefault}}final javax.ws.rs.core.Response.ResponseBuilder response = javax.ws.rs.core.Response.status({{code}}).cacheControl(javax.ws.rs.core.CacheControl.valueOf("{{{vendorExtensions.x-cache-control}}}{{^vendorExtensions.x-cache-control}}no-cache, no-store, must-revalidate, private{{/vendorExtensions.x-cache-control}}"));{{/isDefault}}{{/responses}}
		try {
			{{#@root.useBeanValidation}}
			{{#allParams}}
			{{#if vendorExtensions.x-validation}}
			javax.validation.ValidatorFactory factory = javax.validation.Validation.buildDefaultValidatorFactory();
			javax.validation.Validator validator = factory.getValidator();
			java.util.Set<javax.validation.ConstraintViolation<{{{nativeType}}}>> validations = validator.validate({{identifier name}});
			if (!validations.isEmpty()) {
				throw new {{{className @root/name}}}ApiService.{{{className ../name}}}400Exception(validations);
			}
			
			{{/if}}
			{{/allParams}}
			{{/@root.useBeanValidation}}
			{{#defaultResponse}}
			{{#if nativeType}}{{{nativeType}}} entity = {{/if}}delegate.{{identifier ../name}}({{#../allParams}}{{#if isFile}}{{identifier name}}InputStream, {{identifier name}}Detail{{else}}{{identifier name}}{{/if}}{{#hasMore}}, {{/hasMore}}{{/../allParams}}{{#unless nativeType}}{{#if ../allParams}}, {{/if}}response{{/unless}});
			{{#if nativeType}}
			response.entity(entity);
			{{/if}}
			return response.build();
			{{/defaultResponse}}
		{{#responses}}
		{{^isDefault}}
		} catch ({{{className @root/name}}}ApiService.{{{className ../name}}}{{{code}}}Exception e) {
			response.status({{code}});
			{{#if nativeType}}
			response.entity(e.getEntity());
			{{/if}}
			return response.build();
		{{/isDefault}}
		{{/responses}}
		} finally {
		
		}
	}

{{/operations}}
}
